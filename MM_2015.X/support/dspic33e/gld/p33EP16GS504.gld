/*
** Linker script for PIC33EP16GS504
** (c) Copyright 2013 Microchip Technology, Inc
** Part support version v1.22.A(19-Aug-2014)
*/

OUTPUT_ARCH("33EP16GS504")
CRT0_STARTUP(crt0_extendedep.o)
CRT1_STARTUP(crt1_extendedep.o)

OPTIONAL(-lp33EP16GS504)

/*
** Memory Regions
*/
MEMORY
{
  data  (a!xr)   : ORIGIN = 0x1000,        LENGTH = 0x800
  reset          : ORIGIN = 0x0,           LENGTH = 0x4
  ivt            : ORIGIN = 0x4,           LENGTH = 0x1FC
  program (xr)   : ORIGIN = 0x200,         LENGTH = 0xAD80
  FSEC           : ORIGIN = 0x2B80,        LENGTH = 0x2
  FBSLIM         : ORIGIN = 0x2B90,        LENGTH = 0x2
  FSIGN          : ORIGIN = 0x2B94,        LENGTH = 0x2
  FOSCSEL        : ORIGIN = 0x2B98,        LENGTH = 0x2
  FOSC           : ORIGIN = 0x2B9C,        LENGTH = 0x2
  FWDT           : ORIGIN = 0x2BA0,        LENGTH = 0x2
  FPOR           : ORIGIN = 0x2BA4,        LENGTH = 0x2
  FICD           : ORIGIN = 0x2BA8,        LENGTH = 0x2
  FDEVOPT        : ORIGIN = 0x2BAC,        LENGTH = 0x2
  FALTREG        : ORIGIN = 0x2BB0,        LENGTH = 0x2
}

__FSEC = 0x2B80;
__FBSLIM = 0x2B90;
__FSIGN = 0x2B94;
__FOSCSEL = 0x2B98;
__FOSC = 0x2B9C;
__FWDT = 0x2BA0;
__FPOR = 0x2BA4;
__FICD = 0x2BA8;
__FDEVOPT = 0x2BAC;
__FALTREG = 0x2BB0;
__NO_HANDLES = 1;          /* Suppress handles on this device  */
__CODE_BASE = 0x200;
__CODE_LENGTH = 0xAD80;
__IVT_BASE  = 0x4;

__DATA_BASE = 0x1000;
__DATA_LENGTH = 0x800;
__YDATA_BASE = 0x1400;


/*
** ==================== Section Map ======================
*/
SECTIONS
{
  /*
  ** ========== Program Memory ==========
  */


  /*
  ** Reset Instruction
  */
  .reset :
  {
        SHORT(ABSOLUTE(__reset));
        SHORT(0x04);
        SHORT((ABSOLUTE(__reset) >> 16) & 0x7F);
        SHORT(0);
  } >reset


  /*
  ** Interrupt Vector Tables
  **
  ** The primary and alternate tables are loaded
  ** here, between sections .reset and .text.
  ** Vector table source code appears below.
  */


  /*
  ** User Code and Library Code
  **
  ** This section must not be assigned to __CODE_BASE,
  ** because CodeGuard(tm) sections may be located there.
  **
  ** Note that input sections *(.text) are not mapped here.
  ** The best-fit allocator locates them, so that .text
  ** may flow around PSV sections as needed.
  */
  .text :
  {
        *(.init);
        *(.user_init);
        KEEP (*(.handle));
        KEEP (*(.isr*));
        *(.libc) *(.libm) *(.libdsp);  /* keep together in this order */
        *(.lib*);
  } >program


  /*
  ** User-Defined Section in Program Memory
  **
  ** note: can specify an address using
  **       the following syntax:
  **
  **       usercode 0x1234 :
  **         {
  **           *(usercode);
  **         } >program
  */
  usercode :
  {
        *(usercode);
  } >program


  /*
  ** User-Defined Constants in Program Memory
  **
  ** For PSV type sections, the Load Memory Address (LMA)
  ** should be specified as follows:
  **
  **       userconst : AT(0x1234)
  **         {
  **           *(userconst);
  **         } >program
  **
  ** Note that mapping PSV sections in linker scripts
  ** is not generally recommended.
  **
  ** Because of page alignment restrictions, memory is
  ** often used more efficiently when PSV sections
  ** do not appear in the linker script.
  **
  ** For more information on memory allocation,
  ** please refer to chapter 10, 'Linker Processing'
  ** in the Assembler, Linker manual (DS51317).
  */


  /*
  ** Configuration Words
  */
  __FSEC :
  { KEEP (*(__FSEC.sec*))    } >FSEC
  __FBSLIM :
  { KEEP (*(__FBSLIM.sec*))    } >FBSLIM
  __FSIGN :
  { KEEP (*(__FSIGN.sec*))    } >FSIGN
  __FOSCSEL :
  { KEEP (*(__FOSCSEL.sec*))    } >FOSCSEL
  __FOSC :
  { KEEP (*(__FOSC.sec*))    } >FOSC
  __FWDT :
  { KEEP (*(__FWDT.sec*))    } >FWDT
  __FPOR :
  { KEEP (*(__FPOR.sec*))    } >FPOR
  __FICD :
  { KEEP (*(__FICD.sec*))    } >FICD
  __FDEVOPT :
  { KEEP (*(__FDEVOPT.sec*))    } >FDEVOPT
  __FALTREG :
  { KEEP (*(__FALTREG.sec*))    } >FALTREG






  /*
  ** =========== Data Memory ===========
  */


  /*
  ** ICD Debug Exec
  **
  ** This section provides optional storage for
  ** the ICD2 debugger. Define a global symbol
  ** named __ICD2RAM to enable ICD2. This section
  ** must be loaded at data address 0x1000.
  */
  .icd __DATA_BASE (NOLOAD):
  {
    . += (DEFINED (__ICD2RAM) ? 0x50 : 0 );
  } > data


  /*
  ** Other sections in data memory are not explicitly mapped.
  ** Instead they are allocated according to their section
  ** attributes, which is most efficient.
  ** 
  ** If a specific arrangement of sections is required
  ** (other than what can be achieved using attributes)
  ** additional sections may be defined here. See chapter
  ** 10.5 in the MPLAB ASM30/LINK30 User's Guide (DS51317)
  ** for more information.
  */


  /*
  ** ========== Debug Info ==============
  */

  .comment        0 : { *(.comment) }

  /*
  ** DWARF-2
  */
  .debug_info     0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  .debug_ranges   0 : { *(.debug_ranges) }
  .debug_aranges  0 : { *(.debug_aranges) }

} /* SECTIONS */

/*
** ================= End of Section Map ================
*/

/*
** Section Map for Interrupt Vector Tables
*/
SECTIONS
{

/*
** Interrupt Vector Table
*/
.ivt __IVT_BASE :
  {
    LONG( DEFINED(__OscillatorFail)    ? ABSOLUTE(__OscillatorFail)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__AddressError)    ? ABSOLUTE(__AddressError)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__HardTrapError)    ? ABSOLUTE(__HardTrapError)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__StackError)    ? ABSOLUTE(__StackError)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__MathError)    ? ABSOLUTE(__MathError)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ReservedTrap5)    ? ABSOLUTE(__ReservedTrap5)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__SoftTrapError)    ? ABSOLUTE(__SoftTrapError)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ReservedTrap7)    ? ABSOLUTE(__ReservedTrap7)    :
         ABSOLUTE(__DefaultInterrupt));

    LONG( DEFINED(__INT0Interrupt)    ? ABSOLUTE(__INT0Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__IC1Interrupt)    ? ABSOLUTE(__IC1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__OC1Interrupt)    ? ABSOLUTE(__OC1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__T1Interrupt)    ? ABSOLUTE(__T1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt4)    ? ABSOLUTE(__Interrupt4)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__IC2Interrupt)    ? ABSOLUTE(__IC2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__OC2Interrupt)    ? ABSOLUTE(__OC2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__T2Interrupt)    ? ABSOLUTE(__T2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__T3Interrupt)    ? ABSOLUTE(__T3Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__SPI1ErrInterrupt)    ? ABSOLUTE(__SPI1ErrInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__SPI1Interrupt)    ? ABSOLUTE(__SPI1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__U1RXInterrupt)    ? ABSOLUTE(__U1RXInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__U1TXInterrupt)    ? ABSOLUTE(__U1TXInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__AD1Interrupt)    ? ABSOLUTE(__AD1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt14)    ? ABSOLUTE(__Interrupt14)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__NVMInterrupt)    ? ABSOLUTE(__NVMInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__SI2C1Interrupt)    ? ABSOLUTE(__SI2C1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__MI2C1Interrupt)    ? ABSOLUTE(__MI2C1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__CMP1Interrupt)    ? ABSOLUTE(__CMP1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__CNInterrupt)    ? ABSOLUTE(__CNInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__INT1Interrupt)    ? ABSOLUTE(__INT1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt21)    ? ABSOLUTE(__Interrupt21)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt22)    ? ABSOLUTE(__Interrupt22)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt23)    ? ABSOLUTE(__Interrupt23)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt24)    ? ABSOLUTE(__Interrupt24)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__OC3Interrupt)    ? ABSOLUTE(__OC3Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__OC4Interrupt)    ? ABSOLUTE(__OC4Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__T4Interrupt)    ? ABSOLUTE(__T4Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__T5Interrupt)    ? ABSOLUTE(__T5Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__INT2Interrupt)    ? ABSOLUTE(__INT2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__U2RXInterrupt)    ? ABSOLUTE(__U2RXInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__U2TXInterrupt)    ? ABSOLUTE(__U2TXInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__SPI2ErrInterrupt)    ? ABSOLUTE(__SPI2ErrInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__SPI2Interrupt)    ? ABSOLUTE(__SPI2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt34)    ? ABSOLUTE(__Interrupt34)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt35)    ? ABSOLUTE(__Interrupt35)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt36)    ? ABSOLUTE(__Interrupt36)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__IC3Interrupt)    ? ABSOLUTE(__IC3Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__IC4Interrupt)    ? ABSOLUTE(__IC4Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt39)    ? ABSOLUTE(__Interrupt39)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt40)    ? ABSOLUTE(__Interrupt40)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt41)    ? ABSOLUTE(__Interrupt41)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt42)    ? ABSOLUTE(__Interrupt42)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt43)    ? ABSOLUTE(__Interrupt43)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt44)    ? ABSOLUTE(__Interrupt44)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt45)    ? ABSOLUTE(__Interrupt45)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt46)    ? ABSOLUTE(__Interrupt46)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt47)    ? ABSOLUTE(__Interrupt47)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt48)    ? ABSOLUTE(__Interrupt48)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__SI2C2Interrupt)    ? ABSOLUTE(__SI2C2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__MI2C2Interrupt)    ? ABSOLUTE(__MI2C2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt51)    ? ABSOLUTE(__Interrupt51)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt52)    ? ABSOLUTE(__Interrupt52)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt53)    ? ABSOLUTE(__Interrupt53)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__INT4Interrupt)    ? ABSOLUTE(__INT4Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt55)    ? ABSOLUTE(__Interrupt55)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt56)    ? ABSOLUTE(__Interrupt56)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__PWMSpEventMatchInterrupt)    ? ABSOLUTE(__PWMSpEventMatchInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt58)    ? ABSOLUTE(__Interrupt58)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt59)    ? ABSOLUTE(__Interrupt59)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt60)    ? ABSOLUTE(__Interrupt60)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt61)    ? ABSOLUTE(__Interrupt61)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt62)    ? ABSOLUTE(__Interrupt62)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt63)    ? ABSOLUTE(__Interrupt63)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt64)    ? ABSOLUTE(__Interrupt64)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__U1ErrInterrupt)    ? ABSOLUTE(__U1ErrInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__U2ErrInterrupt)    ? ABSOLUTE(__U2ErrInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt67)    ? ABSOLUTE(__Interrupt67)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt68)    ? ABSOLUTE(__Interrupt68)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt69)    ? ABSOLUTE(__Interrupt69)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt70)    ? ABSOLUTE(__Interrupt70)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt71)    ? ABSOLUTE(__Interrupt71)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt72)    ? ABSOLUTE(__Interrupt72)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__PWMSecSpEventMatchInterrupt)    ? ABSOLUTE(__PWMSecSpEventMatchInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt74)    ? ABSOLUTE(__Interrupt74)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt75)    ? ABSOLUTE(__Interrupt75)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt76)    ? ABSOLUTE(__Interrupt76)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt77)    ? ABSOLUTE(__Interrupt77)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt78)    ? ABSOLUTE(__Interrupt78)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt79)    ? ABSOLUTE(__Interrupt79)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt80)    ? ABSOLUTE(__Interrupt80)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt81)    ? ABSOLUTE(__Interrupt81)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt82)    ? ABSOLUTE(__Interrupt82)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt83)    ? ABSOLUTE(__Interrupt83)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt84)    ? ABSOLUTE(__Interrupt84)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt85)    ? ABSOLUTE(__Interrupt85)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt86)    ? ABSOLUTE(__Interrupt86)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt87)    ? ABSOLUTE(__Interrupt87)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt88)    ? ABSOLUTE(__Interrupt88)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt89)    ? ABSOLUTE(__Interrupt89)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt90)    ? ABSOLUTE(__Interrupt90)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt91)    ? ABSOLUTE(__Interrupt91)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt92)    ? ABSOLUTE(__Interrupt92)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt93)    ? ABSOLUTE(__Interrupt93)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__PWM1Interrupt)    ? ABSOLUTE(__PWM1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__PWM2Interrupt)    ? ABSOLUTE(__PWM2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__PWM3Interrupt)    ? ABSOLUTE(__PWM3Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__PWM4Interrupt)    ? ABSOLUTE(__PWM4Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__PWM5Interrupt)    ? ABSOLUTE(__PWM5Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt99)    ? ABSOLUTE(__Interrupt99)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt100)    ? ABSOLUTE(__Interrupt100)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt101)    ? ABSOLUTE(__Interrupt101)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt102)    ? ABSOLUTE(__Interrupt102)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__CMP2Interrupt)    ? ABSOLUTE(__CMP2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__CMP3Interrupt)    ? ABSOLUTE(__CMP3Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__CMP4Interrupt)    ? ABSOLUTE(__CMP4Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt106)    ? ABSOLUTE(__Interrupt106)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt107)    ? ABSOLUTE(__Interrupt107)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt108)    ? ABSOLUTE(__Interrupt108)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt109)    ? ABSOLUTE(__Interrupt109)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN0Interrupt)    ? ABSOLUTE(__ADCAN0Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN1Interrupt)    ? ABSOLUTE(__ADCAN1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN2Interrupt)    ? ABSOLUTE(__ADCAN2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN3Interrupt)    ? ABSOLUTE(__ADCAN3Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN4Interrupt)    ? ABSOLUTE(__ADCAN4Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN5Interrupt)    ? ABSOLUTE(__ADCAN5Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN6Interrupt)    ? ABSOLUTE(__ADCAN6Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN7Interrupt)    ? ABSOLUTE(__ADCAN7Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt118)    ? ABSOLUTE(__Interrupt118)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt119)    ? ABSOLUTE(__Interrupt119)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt120)    ? ABSOLUTE(__Interrupt120)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt121)    ? ABSOLUTE(__Interrupt121)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt122)    ? ABSOLUTE(__Interrupt122)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt123)    ? ABSOLUTE(__Interrupt123)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt124)    ? ABSOLUTE(__Interrupt124)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt125)    ? ABSOLUTE(__Interrupt125)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt126)    ? ABSOLUTE(__Interrupt126)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt127)    ? ABSOLUTE(__Interrupt127)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt128)    ? ABSOLUTE(__Interrupt128)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt129)    ? ABSOLUTE(__Interrupt129)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt130)    ? ABSOLUTE(__Interrupt130)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt131)    ? ABSOLUTE(__Interrupt131)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt132)    ? ABSOLUTE(__Interrupt132)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt133)    ? ABSOLUTE(__Interrupt133)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt134)    ? ABSOLUTE(__Interrupt134)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt135)    ? ABSOLUTE(__Interrupt135)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt136)    ? ABSOLUTE(__Interrupt136)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt137)    ? ABSOLUTE(__Interrupt137)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt138)    ? ABSOLUTE(__Interrupt138)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt139)    ? ABSOLUTE(__Interrupt139)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt140)    ? ABSOLUTE(__Interrupt140)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt141)    ? ABSOLUTE(__Interrupt141)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ICDInterrupt)    ? ABSOLUTE(__ICDInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__JTAGInterrupt)    ? ABSOLUTE(__JTAGInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt144)    ? ABSOLUTE(__Interrupt144)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt145)    ? ABSOLUTE(__Interrupt145)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt146)    ? ABSOLUTE(__Interrupt146)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt147)    ? ABSOLUTE(__Interrupt147)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt148)    ? ABSOLUTE(__Interrupt148)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt149)    ? ABSOLUTE(__Interrupt149)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt150)    ? ABSOLUTE(__Interrupt150)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN8Interrupt)    ? ABSOLUTE(__ADCAN8Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN9Interrupt)    ? ABSOLUTE(__ADCAN9Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN10Interrupt)    ? ABSOLUTE(__ADCAN10Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN11Interrupt)    ? ABSOLUTE(__ADCAN11Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN12Interrupt)    ? ABSOLUTE(__ADCAN12Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt156)    ? ABSOLUTE(__Interrupt156)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN14Interrupt)    ? ABSOLUTE(__ADCAN14Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt158)    ? ABSOLUTE(__Interrupt158)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt159)    ? ABSOLUTE(__Interrupt159)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN17Interrupt)    ? ABSOLUTE(__ADCAN17Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN18Interrupt)    ? ABSOLUTE(__ADCAN18Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN19Interrupt)    ? ABSOLUTE(__ADCAN19Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN20Interrupt)    ? ABSOLUTE(__ADCAN20Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN21Interrupt)    ? ABSOLUTE(__ADCAN21Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN22Interrupt)    ? ABSOLUTE(__ADCAN22Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN23Interrupt)    ? ABSOLUTE(__ADCAN23Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN24Interrupt)    ? ABSOLUTE(__ADCAN24Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN25Interrupt)    ? ABSOLUTE(__ADCAN25Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCAN26Interrupt)    ? ABSOLUTE(__ADCAN26Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt170)    ? ABSOLUTE(__Interrupt170)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt171)    ? ABSOLUTE(__Interrupt171)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt172)    ? ABSOLUTE(__Interrupt172)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__I2C1BCInterrupt)    ? ABSOLUTE(__I2C1BCInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__I2C2BCInterrupt)    ? ABSOLUTE(__I2C2BCInterrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt175)    ? ABSOLUTE(__Interrupt175)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__Interrupt176)    ? ABSOLUTE(__Interrupt176)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCMP1Interrupt)    ? ABSOLUTE(__ADCMP1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADCMP2Interrupt)    ? ABSOLUTE(__ADCMP2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADFLTR1Interrupt)    ? ABSOLUTE(__ADFLTR1Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
    LONG( DEFINED(__ADFLTR2Interrupt)    ? ABSOLUTE(__ADFLTR2Interrupt)    :
         ABSOLUTE(__DefaultInterrupt));
  } >ivt
} /* SECTIONS */


/*
** ============== Equates for SFR Addresses =============
*/

 WREG0        = 0x0;
_WREG0        = 0x0;
 WREG1        = 0x2;
_WREG1        = 0x2;
 WREG2        = 0x4;
_WREG2        = 0x4;
 WREG3        = 0x6;
_WREG3        = 0x6;
 WREG4        = 0x8;
_WREG4        = 0x8;
 WREG5        = 0xA;
_WREG5        = 0xA;
 WREG6        = 0xC;
_WREG6        = 0xC;
 WREG7        = 0xE;
_WREG7        = 0xE;
 WREG8        = 0x10;
_WREG8        = 0x10;
 WREG9        = 0x12;
_WREG9        = 0x12;
 WREG10       = 0x14;
_WREG10       = 0x14;
 WREG11       = 0x16;
_WREG11       = 0x16;
 WREG12       = 0x18;
_WREG12       = 0x18;
 WREG13       = 0x1A;
_WREG13       = 0x1A;
 WREG14       = 0x1C;
_WREG14       = 0x1C;
 WREG15       = 0x1E;
_WREG15       = 0x1E;
 SPLIM        = 0x20;
_SPLIM        = 0x20;
 ACCAL        = 0x22;
_ACCAL        = 0x22;
 ACCAH        = 0x24;
_ACCAH        = 0x24;
 ACCAU        = 0x26;
_ACCAU        = 0x26;
 ACCBL        = 0x28;
_ACCBL        = 0x28;
 ACCBH        = 0x2A;
_ACCBH        = 0x2A;
 ACCBU        = 0x2C;
_ACCBU        = 0x2C;
 PCL          = 0x2E;
_PCL          = 0x2E;
 PCH          = 0x30;
_PCH          = 0x30;
 DSRPAG       = 0x32;
_DSRPAG       = 0x32;
_DSRPAGbits   = 0x32;
 DSWPAG       = 0x34;
_DSWPAG       = 0x34;
_DSWPAGbits   = 0x34;
 RCOUNT       = 0x36;
_RCOUNT       = 0x36;
 DCOUNT       = 0x38;
_DCOUNT       = 0x38;
 DOSTARTL     = 0x3A;
_DOSTARTL     = 0x3A;
 DOSTARTH     = 0x3C;
_DOSTARTH     = 0x3C;
 DOENDL       = 0x3E;
_DOENDL       = 0x3E;
 DOENDH       = 0x40;
_DOENDH       = 0x40;
 SR           = 0x42;
_SR           = 0x42;
_SRbits       = 0x42;
 CORCON       = 0x44;
_CORCON       = 0x44;
_CORCONbits   = 0x44;
 MODCON       = 0x46;
_MODCON       = 0x46;
_MODCONbits   = 0x46;
 XMODSRT      = 0x48;
_XMODSRT      = 0x48;
 XMODEND      = 0x4A;
_XMODEND      = 0x4A;
 YMODSRT      = 0x4C;
_YMODSRT      = 0x4C;
 YMODEND      = 0x4E;
_YMODEND      = 0x4E;
 XBREV        = 0x50;
_XBREV        = 0x50;
_XBREVbits    = 0x50;
 DISICNT      = 0x52;
_DISICNT      = 0x52;
 TBLPAG       = 0x54;
_TBLPAG       = 0x54;
_TBLPAGbits   = 0x54;
 CTXTSTAT     = 0x5A;
_CTXTSTAT     = 0x5A;
_CTXTSTATbits = 0x5A;
 TMR1         = 0x100;
_TMR1         = 0x100;
 PR1          = 0x102;
_PR1          = 0x102;
 T1CON        = 0x104;
_T1CON        = 0x104;
_T1CONbits    = 0x104;
 TMR2         = 0x106;
_TMR2         = 0x106;
 TMR3HLD      = 0x108;
_TMR3HLD      = 0x108;
 TMR3         = 0x10A;
_TMR3         = 0x10A;
 PR2          = 0x10C;
_PR2          = 0x10C;
 PR3          = 0x10E;
_PR3          = 0x10E;
 T2CON        = 0x110;
_T2CON        = 0x110;
_T2CONbits    = 0x110;
 T3CON        = 0x112;
_T3CON        = 0x112;
_T3CONbits    = 0x112;
 TMR4         = 0x114;
_TMR4         = 0x114;
 TMR5HLD      = 0x116;
_TMR5HLD      = 0x116;
 TMR5         = 0x118;
_TMR5         = 0x118;
 PR4          = 0x11A;
_PR4          = 0x11A;
 PR5          = 0x11C;
_PR5          = 0x11C;
 T4CON        = 0x11E;
_T4CON        = 0x11E;
_T4CONbits    = 0x11E;
 T5CON        = 0x120;
_T5CON        = 0x120;
_T5CONbits    = 0x120;
 IC1CON1      = 0x140;
_IC1CON1      = 0x140;
_IC1CON1bits  = 0x140;
 IC1CON2      = 0x142;
_IC1CON2      = 0x142;
_IC1CON2bits  = 0x142;
 IC1BUF       = 0x144;
_IC1BUF       = 0x144;
 IC1TMR       = 0x146;
_IC1TMR       = 0x146;
 IC2CON1      = 0x148;
_IC2CON1      = 0x148;
_IC2CON1bits  = 0x148;
 IC2CON2      = 0x14A;
_IC2CON2      = 0x14A;
_IC2CON2bits  = 0x14A;
 IC2BUF       = 0x14C;
_IC2BUF       = 0x14C;
 IC2TMR       = 0x14E;
_IC2TMR       = 0x14E;
 IC3CON1      = 0x150;
_IC3CON1      = 0x150;
_IC3CON1bits  = 0x150;
 IC3CON2      = 0x152;
_IC3CON2      = 0x152;
_IC3CON2bits  = 0x152;
 IC3BUF       = 0x154;
_IC3BUF       = 0x154;
 IC3TMR       = 0x156;
_IC3TMR       = 0x156;
 IC4CON1      = 0x158;
_IC4CON1      = 0x158;
_IC4CON1bits  = 0x158;
 IC4CON2      = 0x15A;
_IC4CON2      = 0x15A;
_IC4CON2bits  = 0x15A;
 IC4BUF       = 0x15C;
_IC4BUF       = 0x15C;
 IC4TMR       = 0x15E;
_IC4TMR       = 0x15E;
 I2C1CON1     = 0x200;
_I2C1CON1     = 0x200;
_I2C1CON1bits = 0x200;
 I2C1CON2     = 0x202;
_I2C1CON2     = 0x202;
_I2C1CON2bits = 0x202;
 I2C1STAT     = 0x204;
_I2C1STAT     = 0x204;
_I2C1STATbits = 0x204;
 I2C1ADD      = 0x206;
_I2C1ADD      = 0x206;
_I2C1ADDbits  = 0x206;
 I2C1MSK      = 0x208;
_I2C1MSK      = 0x208;
_I2C1MSKbits  = 0x208;
 I2C1BRG      = 0x20A;
_I2C1BRG      = 0x20A;
 I2C1TRN      = 0x20C;
_I2C1TRN      = 0x20C;
_I2C1TRNbits  = 0x20C;
 I2C1RCV      = 0x20E;
_I2C1RCV      = 0x20E;
_I2C1RCVbits  = 0x20E;
 I2C2CON1     = 0x210;
_I2C2CON1     = 0x210;
_I2C2CON1bits = 0x210;
 I2C2CON2     = 0x212;
_I2C2CON2     = 0x212;
_I2C2CON2bits = 0x212;
 I2C2STAT     = 0x214;
_I2C2STAT     = 0x214;
_I2C2STATbits = 0x214;
 I2C2ADD      = 0x216;
_I2C2ADD      = 0x216;
_I2C2ADDbits  = 0x216;
 I2C2MSK      = 0x218;
_I2C2MSK      = 0x218;
_I2C2MSKbits  = 0x218;
 I2C2BRG      = 0x21A;
_I2C2BRG      = 0x21A;
 I2C2TRN      = 0x21C;
_I2C2TRN      = 0x21C;
_I2C2TRNbits  = 0x21C;
 I2C2RCV      = 0x21E;
_I2C2RCV      = 0x21E;
_I2C2RCVbits  = 0x21E;
 U1MODE       = 0x220;
_U1MODE       = 0x220;
_U1MODEbits   = 0x220;
 U1STA        = 0x222;
_U1STA        = 0x222;
_U1STAbits    = 0x222;
 U1TXREG      = 0x224;
_U1TXREG      = 0x224;
 U1RXREG      = 0x226;
_U1RXREG      = 0x226;
 U1BRG        = 0x228;
_U1BRG        = 0x228;
 U2MODE       = 0x230;
_U2MODE       = 0x230;
_U2MODEbits   = 0x230;
 U2STA        = 0x232;
_U2STA        = 0x232;
_U2STAbits    = 0x232;
 U2TXREG      = 0x234;
_U2TXREG      = 0x234;
 U2RXREG      = 0x236;
_U2RXREG      = 0x236;
 U2BRG        = 0x238;
_U2BRG        = 0x238;
 SPI1STAT     = 0x240;
_SPI1STAT     = 0x240;
_SPI1STATbits = 0x240;
 SPI1CON1     = 0x242;
_SPI1CON1     = 0x242;
_SPI1CON1bits = 0x242;
 SPI1CON2     = 0x244;
_SPI1CON2     = 0x244;
_SPI1CON2bits = 0x244;
 SPI1BUF      = 0x248;
_SPI1BUF      = 0x248;
 SPI2STAT     = 0x260;
_SPI2STAT     = 0x260;
_SPI2STATbits = 0x260;
 SPI2CON1     = 0x262;
_SPI2CON1     = 0x262;
_SPI2CON1bits = 0x262;
 SPI2CON2     = 0x264;
_SPI2CON2     = 0x264;
_SPI2CON2bits = 0x264;
 SPI2BUF      = 0x268;
_SPI2BUF      = 0x268;
 ADCON1       = 0x300;
_ADCON1       = 0x300;
_ADCON1bits   = 0x300;
 ADCON2       = 0x302;
_ADCON2       = 0x302;
_ADCON2bits   = 0x302;
 ADCON3       = 0x304;
_ADCON3       = 0x304;
_ADCON3bits   = 0x304;
 ADCON4       = 0x306;
_ADCON4       = 0x306;
_ADCON4bits   = 0x306;
 ADCON5       = 0x308;
_ADCON5       = 0x308;
_ADCON5bits   = 0x308;
 ADCON6       = 0x30A;
_ADCON6       = 0x30A;
_ADCON6bits   = 0x30A;
 ADMOD        = 0x30C;
_ADMOD        = 0x30C;
_ADMODbits    = 0x30C;
 ADALT        = 0x30E;
_ADALT        = 0x30E;
_ADALTbits    = 0x30E;
 ADGIRQENL    = 0x310;
_ADGIRQENL    = 0x310;
_ADGIRQENLbits = 0x310;
 ADGIRQENH    = 0x312;
_ADGIRQENH    = 0x312;
_ADGIRQENHbits = 0x312;
 ADCSSL       = 0x318;
_ADCSSL       = 0x318;
_ADCSSLbits   = 0x318;
 ADCSSH       = 0x31A;
_ADCSSH       = 0x31A;
_ADCSSHbits   = 0x31A;
 ADSTATL      = 0x320;
_ADSTATL      = 0x320;
_ADSTATLbits  = 0x320;
 ADSTATH      = 0x322;
_ADSTATH      = 0x322;
_ADSTATHbits  = 0x322;
 DCMP1ENL     = 0x328;
_DCMP1ENL     = 0x328;
_DCMP1ENLbits = 0x328;
 DCMP1ENH     = 0x32A;
_DCMP1ENH     = 0x32A;
_DCMP1ENHbits = 0x32A;
 DCMP1LO      = 0x32C;
_DCMP1LO      = 0x32C;
 DCMP1HI      = 0x32E;
_DCMP1HI      = 0x32E;
 DCMP2ENL     = 0x330;
_DCMP2ENL     = 0x330;
_DCMP2ENLbits = 0x330;
 DCMP2ENH     = 0x332;
_DCMP2ENH     = 0x332;
_DCMP2ENHbits = 0x332;
 DCMP2LO      = 0x334;
_DCMP2LO      = 0x334;
 DCMP2HI      = 0x336;
_DCMP2HI      = 0x336;
 ADFLTR1DAT   = 0x358;
_ADFLTR1DAT   = 0x358;
 ADFLTR1CON   = 0x35A;
_ADFLTR1CON   = 0x35A;
_ADFLTR1CONbits = 0x35A;
 ADFLTR2DAT   = 0x35C;
_ADFLTR2DAT   = 0x35C;
 ADFLTR2CON   = 0x35E;
_ADFLTR2CON   = 0x35E;
_ADFLTR2CONbits = 0x35E;
 ADTRIG1      = 0x370;
_ADTRIG1      = 0x370;
_ADTRIG1bits  = 0x370;
 ADTRIG2      = 0x372;
_ADTRIG2      = 0x372;
_ADTRIG2bits  = 0x372;
 ADTRIG3      = 0x374;
_ADTRIG3      = 0x374;
_ADTRIG3bits  = 0x374;
 ADTRIG4      = 0x376;
_ADTRIG4      = 0x376;
_ADTRIG4bits  = 0x376;
 ADTRIG5      = 0x378;
_ADTRIG5      = 0x378;
_ADTRIG5bits  = 0x378;
 ADTRIG6      = 0x37A;
_ADTRIG6      = 0x37A;
_ADTRIG6bits  = 0x37A;
 ADTRIG7      = 0x37C;
_ADTRIG7      = 0x37C;
_ADTRIG7bits  = 0x37C;
 ADTRIG8      = 0x37E;
_ADTRIG8      = 0x37E;
_ADTRIG8bits  = 0x37E;
 ADTRIG9      = 0x380;
_ADTRIG9      = 0x380;
_ADTRIG9bits  = 0x380;
 ADTRIG10     = 0x382;
_ADTRIG10     = 0x382;
_ADTRIG10bits = 0x382;
 ADTRIG11     = 0x384;
_ADTRIG11     = 0x384;
_ADTRIG11bits = 0x384;
 ADTRIG12     = 0x386;
_ADTRIG12     = 0x386;
_ADTRIG12bits = 0x386;
 ADTRIG13     = 0x388;
_ADTRIG13     = 0x388;
_ADTRIG13bits = 0x388;
 ADTRIG14     = 0x38A;
_ADTRIG14     = 0x38A;
_ADTRIG14bits = 0x38A;
 DCMP1CON     = 0x390;
_DCMP1CON     = 0x390;
_DCMP1CONbits = 0x390;
 DCMP2CON     = 0x394;
_DCMP2CON     = 0x394;
_DCMP2CONbits = 0x394;
 ADBASE       = 0x3B4;
_ADBASE       = 0x3B4;
 ADCBUF0      = 0x3B8;
_ADCBUF0      = 0x3B8;
 ADCBUF1      = 0x3BA;
_ADCBUF1      = 0x3BA;
 ADCBUF2      = 0x3BC;
_ADCBUF2      = 0x3BC;
 ADCBUF3      = 0x3BE;
_ADCBUF3      = 0x3BE;
 ADCBUF4      = 0x3C0;
_ADCBUF4      = 0x3C0;
 ADCBUF5      = 0x3C2;
_ADCBUF5      = 0x3C2;
 ADCBUF6      = 0x3C4;
_ADCBUF6      = 0x3C4;
 ADCBUF7      = 0x3C6;
_ADCBUF7      = 0x3C6;
 ADCBUF8      = 0x3C8;
_ADCBUF8      = 0x3C8;
 ADCBUF9      = 0x3CA;
_ADCBUF9      = 0x3CA;
 ADCBUF10     = 0x3CC;
_ADCBUF10     = 0x3CC;
 ADCBUF11     = 0x3CE;
_ADCBUF11     = 0x3CE;
 ADCBUF12     = 0x3D0;
_ADCBUF12     = 0x3D0;
 ADCBUF14     = 0x3D4;
_ADCBUF14     = 0x3D4;
 ADCBUF17     = 0x3DA;
_ADCBUF17     = 0x3DA;
 ADCBUF18     = 0x3DC;
_ADCBUF18     = 0x3DC;
 ADCBUF19     = 0x3DE;
_ADCBUF19     = 0x3DE;
 ADCBUF20     = 0x3E0;
_ADCBUF20     = 0x3E0;
 ADCBUF21     = 0x3E2;
_ADCBUF21     = 0x3E2;
 ADCBUF22     = 0x3E4;
_ADCBUF22     = 0x3E4;
 ADCBUF23     = 0x3E6;
_ADCBUF23     = 0x3E6;
 ADCBUF24     = 0x3E8;
_ADCBUF24     = 0x3E8;
 ADCBUF25     = 0x3EA;
_ADCBUF25     = 0x3EA;
 ADCBUF26     = 0x3EC;
_ADCBUF26     = 0x3EC;
 ISRCCON      = 0x500;
_ISRCCON      = 0x500;
_ISRCCONbits  = 0x500;
 PGA1CON      = 0x504;
_PGA1CON      = 0x504;
_PGA1CONbits  = 0x504;
 PGA1CAL      = 0x506;
_PGA1CAL      = 0x506;
_PGA1CALbits  = 0x506;
 PGA2CON      = 0x508;
_PGA2CON      = 0x508;
_PGA2CONbits  = 0x508;
 PGA2CAL      = 0x50A;
_PGA2CAL      = 0x50A;
_PGA2CALbits  = 0x50A;
 CMP1CON      = 0x540;
_CMP1CON      = 0x540;
_CMP1CONbits  = 0x540;
 CMP1DAC      = 0x542;
_CMP1DAC      = 0x542;
_CMP1DACbits  = 0x542;
 CMP2CON      = 0x544;
_CMP2CON      = 0x544;
_CMP2CONbits  = 0x544;
 CMP2DAC      = 0x546;
_CMP2DAC      = 0x546;
_CMP2DACbits  = 0x546;
 CMP3CON      = 0x548;
_CMP3CON      = 0x548;
_CMP3CONbits  = 0x548;
 CMP3DAC      = 0x54A;
_CMP3DAC      = 0x54A;
_CMP3DACbits  = 0x54A;
 CMP4CON      = 0x54C;
_CMP4CON      = 0x54C;
_CMP4CONbits  = 0x54C;
 CMP4DAC      = 0x54E;
_CMP4DAC      = 0x54E;
_CMP4DACbits  = 0x54E;
 RPOR0        = 0x670;
_RPOR0        = 0x670;
_RPOR0bits    = 0x670;
 RPOR1        = 0x672;
_RPOR1        = 0x672;
_RPOR1bits    = 0x672;
 RPOR2        = 0x674;
_RPOR2        = 0x674;
_RPOR2bits    = 0x674;
 RPOR3        = 0x676;
_RPOR3        = 0x676;
_RPOR3bits    = 0x676;
 RPOR4        = 0x678;
_RPOR4        = 0x678;
_RPOR4bits    = 0x678;
 RPOR5        = 0x67A;
_RPOR5        = 0x67A;
_RPOR5bits    = 0x67A;
 RPOR6        = 0x67C;
_RPOR6        = 0x67C;
_RPOR6bits    = 0x67C;
 RPOR7        = 0x67E;
_RPOR7        = 0x67E;
_RPOR7bits    = 0x67E;
 RPOR8        = 0x680;
_RPOR8        = 0x680;
_RPOR8bits    = 0x680;
 RPOR9        = 0x682;
_RPOR9        = 0x682;
_RPOR9bits    = 0x682;
 RPOR10       = 0x684;
_RPOR10       = 0x684;
_RPOR10bits   = 0x684;
 RPOR11       = 0x686;
_RPOR11       = 0x686;
_RPOR11bits   = 0x686;
 RPOR12       = 0x688;
_RPOR12       = 0x688;
_RPOR12bits   = 0x688;
 RPOR13       = 0x68A;
_RPOR13       = 0x68A;
_RPOR13bits   = 0x68A;
 RPOR14       = 0x68C;
_RPOR14       = 0x68C;
_RPOR14bits   = 0x68C;
 RPOR16       = 0x690;
_RPOR16       = 0x690;
_RPOR16bits   = 0x690;
 RPOR17       = 0x692;
_RPOR17       = 0x692;
_RPOR17bits   = 0x692;
 RPOR18       = 0x694;
_RPOR18       = 0x694;
_RPOR18bits   = 0x694;
 RPINR0       = 0x6A0;
_RPINR0       = 0x6A0;
_RPINR0bits   = 0x6A0;
 RPINR1       = 0x6A2;
_RPINR1       = 0x6A2;
_RPINR1bits   = 0x6A2;
 RPINR2       = 0x6A4;
_RPINR2       = 0x6A4;
_RPINR2bits   = 0x6A4;
 RPINR3       = 0x6A6;
_RPINR3       = 0x6A6;
_RPINR3bits   = 0x6A6;
 RPINR7       = 0x6AE;
_RPINR7       = 0x6AE;
_RPINR7bits   = 0x6AE;
 RPINR8       = 0x6B0;
_RPINR8       = 0x6B0;
_RPINR8bits   = 0x6B0;
 RPINR11      = 0x6B6;
_RPINR11      = 0x6B6;
_RPINR11bits  = 0x6B6;
 RPINR12      = 0x6B8;
_RPINR12      = 0x6B8;
_RPINR12bits  = 0x6B8;
 RPINR13      = 0x6BA;
_RPINR13      = 0x6BA;
_RPINR13bits  = 0x6BA;
 RPINR18      = 0x6C4;
_RPINR18      = 0x6C4;
_RPINR18bits  = 0x6C4;
 RPINR19      = 0x6C6;
_RPINR19      = 0x6C6;
_RPINR19bits  = 0x6C6;
 RPINR20      = 0x6C8;
_RPINR20      = 0x6C8;
_RPINR20bits  = 0x6C8;
 RPINR21      = 0x6CA;
_RPINR21      = 0x6CA;
_RPINR21bits  = 0x6CA;
 RPINR22      = 0x6CC;
_RPINR22      = 0x6CC;
_RPINR22bits  = 0x6CC;
 RPINR23      = 0x6CE;
_RPINR23      = 0x6CE;
_RPINR23bits  = 0x6CE;
 RPINR37      = 0x6EA;
_RPINR37      = 0x6EA;
_RPINR37bits  = 0x6EA;
 RPINR38      = 0x6EC;
_RPINR38      = 0x6EC;
_RPINR38bits  = 0x6EC;
 RPINR42      = 0x6F4;
_RPINR42      = 0x6F4;
_RPINR42bits  = 0x6F4;
 RPINR43      = 0x6F6;
_RPINR43      = 0x6F6;
_RPINR43bits  = 0x6F6;
 NVMCON       = 0x728;
_NVMCON       = 0x728;
_NVMCONbits   = 0x728;
 NVMADR       = 0x72A;
_NVMADR       = 0x72A;
 NVMADRU      = 0x72C;
_NVMADRU      = 0x72C;
_NVMADRUbits  = 0x72C;
 NVMKEY       = 0x72E;
_NVMKEY       = 0x72E;
 NVMSRCADR    = 0x730;
_NVMSRCADR    = 0x730;
 RCON         = 0x740;
_RCON         = 0x740;
_RCONbits     = 0x740;
 OSCCON       = 0x742;
_OSCCON       = 0x742;
_OSCCONbits   = 0x742;
 OSCCONL      = 0x742;
_OSCCONL      = 0x742;
 OSCCONH      = 0x743;
_OSCCONH      = 0x743;
 CLKDIV       = 0x744;
_CLKDIV       = 0x744;
_CLKDIVbits   = 0x744;
 PLLFBD       = 0x746;
_PLLFBD       = 0x746;
_PLLFBDbits   = 0x746;
 OSCTUN       = 0x748;
_OSCTUN       = 0x748;
_OSCTUNbits   = 0x748;
 LFSR         = 0x74C;
_LFSR         = 0x74C;
_LFSRbits     = 0x74C;
 REFOCON      = 0x74E;
_REFOCON      = 0x74E;
_REFOCONbits  = 0x74E;
 ACLKCON      = 0x750;
_ACLKCON      = 0x750;
_ACLKCONbits  = 0x750;
 PMD1         = 0x760;
_PMD1         = 0x760;
_PMD1bits     = 0x760;
 PMD2         = 0x762;
_PMD2         = 0x762;
_PMD2bits     = 0x762;
 PMD3         = 0x764;
_PMD3         = 0x764;
_PMD3bits     = 0x764;
 PMD4         = 0x766;
_PMD4         = 0x766;
_PMD4bits     = 0x766;
 PMD6         = 0x76A;
_PMD6         = 0x76A;
_PMD6bits     = 0x76A;
 PMD7         = 0x76C;
_PMD7         = 0x76C;
_PMD7bits     = 0x76C;
 PMD8         = 0x76E;
_PMD8         = 0x76E;
_PMD8bits     = 0x76E;
 IFS0         = 0x800;
_IFS0         = 0x800;
_IFS0bits     = 0x800;
 IFS1         = 0x802;
_IFS1         = 0x802;
_IFS1bits     = 0x802;
 IFS2         = 0x804;
_IFS2         = 0x804;
_IFS2bits     = 0x804;
 IFS3         = 0x806;
_IFS3         = 0x806;
_IFS3bits     = 0x806;
 IFS4         = 0x808;
_IFS4         = 0x808;
_IFS4bits     = 0x808;
 IFS5         = 0x80A;
_IFS5         = 0x80A;
_IFS5bits     = 0x80A;
 IFS6         = 0x80C;
_IFS6         = 0x80C;
_IFS6bits     = 0x80C;
 IFS7         = 0x80E;
_IFS7         = 0x80E;
_IFS7bits     = 0x80E;
 IFS8         = 0x810;
_IFS8         = 0x810;
_IFS8bits     = 0x810;
 IFS9         = 0x812;
_IFS9         = 0x812;
_IFS9bits     = 0x812;
 IFS10        = 0x814;
_IFS10        = 0x814;
_IFS10bits    = 0x814;
 IFS11        = 0x816;
_IFS11        = 0x816;
_IFS11bits    = 0x816;
 IEC0         = 0x820;
_IEC0         = 0x820;
_IEC0bits     = 0x820;
 IEC1         = 0x822;
_IEC1         = 0x822;
_IEC1bits     = 0x822;
 IEC2         = 0x824;
_IEC2         = 0x824;
_IEC2bits     = 0x824;
 IEC3         = 0x826;
_IEC3         = 0x826;
_IEC3bits     = 0x826;
 IEC4         = 0x828;
_IEC4         = 0x828;
_IEC4bits     = 0x828;
 IEC5         = 0x82A;
_IEC5         = 0x82A;
_IEC5bits     = 0x82A;
 IEC6         = 0x82C;
_IEC6         = 0x82C;
_IEC6bits     = 0x82C;
 IEC7         = 0x82E;
_IEC7         = 0x82E;
_IEC7bits     = 0x82E;
 IEC8         = 0x830;
_IEC8         = 0x830;
_IEC8bits     = 0x830;
 IEC9         = 0x832;
_IEC9         = 0x832;
_IEC9bits     = 0x832;
 IEC10        = 0x834;
_IEC10        = 0x834;
_IEC10bits    = 0x834;
 IEC11        = 0x836;
_IEC11        = 0x836;
_IEC11bits    = 0x836;
 IPC0         = 0x840;
_IPC0         = 0x840;
_IPC0bits     = 0x840;
 IPC1         = 0x842;
_IPC1         = 0x842;
_IPC1bits     = 0x842;
 IPC2         = 0x844;
_IPC2         = 0x844;
_IPC2bits     = 0x844;
 IPC3         = 0x846;
_IPC3         = 0x846;
_IPC3bits     = 0x846;
 IPC4         = 0x848;
_IPC4         = 0x848;
_IPC4bits     = 0x848;
 IPC5         = 0x84A;
_IPC5         = 0x84A;
_IPC5bits     = 0x84A;
 IPC6         = 0x84C;
_IPC6         = 0x84C;
_IPC6bits     = 0x84C;
 IPC7         = 0x84E;
_IPC7         = 0x84E;
_IPC7bits     = 0x84E;
 IPC8         = 0x850;
_IPC8         = 0x850;
_IPC8bits     = 0x850;
 IPC9         = 0x852;
_IPC9         = 0x852;
_IPC9bits     = 0x852;
 IPC12        = 0x858;
_IPC12        = 0x858;
_IPC12bits    = 0x858;
 IPC14        = 0x85C;
_IPC14        = 0x85C;
_IPC14bits    = 0x85C;
 IPC16        = 0x860;
_IPC16        = 0x860;
_IPC16bits    = 0x860;
 IPC18        = 0x864;
_IPC18        = 0x864;
_IPC18bits    = 0x864;
 IPC23        = 0x86E;
_IPC23        = 0x86E;
_IPC23bits    = 0x86E;
 IPC24        = 0x870;
_IPC24        = 0x870;
_IPC24bits    = 0x870;
 IPC25        = 0x872;
_IPC25        = 0x872;
_IPC25bits    = 0x872;
 IPC26        = 0x874;
_IPC26        = 0x874;
_IPC26bits    = 0x874;
 IPC27        = 0x876;
_IPC27        = 0x876;
_IPC27bits    = 0x876;
 IPC28        = 0x878;
_IPC28        = 0x878;
_IPC28bits    = 0x878;
 IPC29        = 0x87A;
_IPC29        = 0x87A;
_IPC29bits    = 0x87A;
 IPC35        = 0x886;
_IPC35        = 0x886;
_IPC35bits    = 0x886;
 IPC37        = 0x88A;
_IPC37        = 0x88A;
_IPC37bits    = 0x88A;
 IPC38        = 0x88C;
_IPC38        = 0x88C;
_IPC38bits    = 0x88C;
 IPC39        = 0x88E;
_IPC39        = 0x88E;
_IPC39bits    = 0x88E;
 IPC40        = 0x890;
_IPC40        = 0x890;
_IPC40bits    = 0x890;
 IPC41        = 0x892;
_IPC41        = 0x892;
_IPC41bits    = 0x892;
 IPC42        = 0x894;
_IPC42        = 0x894;
_IPC42bits    = 0x894;
 IPC43        = 0x896;
_IPC43        = 0x896;
_IPC43bits    = 0x896;
 IPC44        = 0x898;
_IPC44        = 0x898;
_IPC44bits    = 0x898;
 IPC45        = 0x89A;
_IPC45        = 0x89A;
_IPC45bits    = 0x89A;
 INTCON1      = 0x8C0;
_INTCON1      = 0x8C0;
_INTCON1bits  = 0x8C0;
 INTCON2      = 0x8C2;
_INTCON2      = 0x8C2;
_INTCON2bits  = 0x8C2;
 INTCON3      = 0x8C4;
_INTCON3      = 0x8C4;
_INTCON3bits  = 0x8C4;
 INTCON4      = 0x8C6;
_INTCON4      = 0x8C6;
_INTCON4bits  = 0x8C6;
 INTTREG      = 0x8C8;
_INTTREG      = 0x8C8;
_INTTREGbits  = 0x8C8;
 OC1CON1      = 0x900;
_OC1CON1      = 0x900;
_OC1CON1bits  = 0x900;
 OC1CON2      = 0x902;
_OC1CON2      = 0x902;
_OC1CON2bits  = 0x902;
 OC1RS        = 0x904;
_OC1RS        = 0x904;
 OC1R         = 0x906;
_OC1R         = 0x906;
 OC1TMR       = 0x908;
_OC1TMR       = 0x908;
 OC2CON1      = 0x90A;
_OC2CON1      = 0x90A;
_OC2CON1bits  = 0x90A;
 OC2CON2      = 0x90C;
_OC2CON2      = 0x90C;
_OC2CON2bits  = 0x90C;
 OC2RS        = 0x90E;
_OC2RS        = 0x90E;
 OC2R         = 0x910;
_OC2R         = 0x910;
 OC2TMR       = 0x912;
_OC2TMR       = 0x912;
 OC3CON1      = 0x914;
_OC3CON1      = 0x914;
_OC3CON1bits  = 0x914;
 OC3CON2      = 0x916;
_OC3CON2      = 0x916;
_OC3CON2bits  = 0x916;
 OC3RS        = 0x918;
_OC3RS        = 0x918;
 OC3R         = 0x91A;
_OC3R         = 0x91A;
 OC3TMR       = 0x91C;
_OC3TMR       = 0x91C;
 OC4CON1      = 0x91E;
_OC4CON1      = 0x91E;
_OC4CON1bits  = 0x91E;
 OC4CON2      = 0x920;
_OC4CON2      = 0x920;
_OC4CON2bits  = 0x920;
 OC4RS        = 0x922;
_OC4RS        = 0x922;
 OC4R         = 0x924;
_OC4R         = 0x924;
 OC4TMR       = 0x926;
_OC4TMR       = 0x926;
 PTCON        = 0xC00;
_PTCON        = 0xC00;
_PTCONbits    = 0xC00;
 PTCON2       = 0xC02;
_PTCON2       = 0xC02;
_PTCON2bits   = 0xC02;
 PTPER        = 0xC04;
_PTPER        = 0xC04;
 SEVTCMP      = 0xC06;
_SEVTCMP      = 0xC06;
_SEVTCMPbits  = 0xC06;
 MDC          = 0xC0A;
_MDC          = 0xC0A;
 STCON        = 0xC0E;
_STCON        = 0xC0E;
_STCONbits    = 0xC0E;
 STCON2       = 0xC10;
_STCON2       = 0xC10;
_STCON2bits   = 0xC10;
 STPER        = 0xC12;
_STPER        = 0xC12;
 SSEVTCMP     = 0xC14;
_SSEVTCMP     = 0xC14;
_SSEVTCMPbits = 0xC14;
 CHOP         = 0xC1A;
_CHOP         = 0xC1A;
_CHOPbits     = 0xC1A;
 PWMKEY       = 0xC1E;
_PWMKEY       = 0xC1E;
 PWMCON1      = 0xC20;
_PWMCON1      = 0xC20;
_PWMCON1bits  = 0xC20;
 IOCON1       = 0xC22;
_IOCON1       = 0xC22;
_IOCON1bits   = 0xC22;
 FCLCON1      = 0xC24;
_FCLCON1      = 0xC24;
_FCLCON1bits  = 0xC24;
 PDC1         = 0xC26;
_PDC1         = 0xC26;
 PHASE1       = 0xC28;
_PHASE1       = 0xC28;
 DTR1         = 0xC2A;
_DTR1         = 0xC2A;
 ALTDTR1      = 0xC2C;
_ALTDTR1      = 0xC2C;
 SDC1         = 0xC2E;
_SDC1         = 0xC2E;
 SPHASE1      = 0xC30;
_SPHASE1      = 0xC30;
 TRIG1        = 0xC32;
_TRIG1        = 0xC32;
_TRIG1bits    = 0xC32;
 TRGCON1      = 0xC34;
_TRGCON1      = 0xC34;
_TRGCON1bits  = 0xC34;
 STRIG1       = 0xC36;
_STRIG1       = 0xC36;
_STRIG1bits   = 0xC36;
 PWMCAP1      = 0xC38;
_PWMCAP1      = 0xC38;
_PWMCAP1bits  = 0xC38;
 LEBCON1      = 0xC3A;
_LEBCON1      = 0xC3A;
_LEBCON1bits  = 0xC3A;
 LEBDLY1      = 0xC3C;
_LEBDLY1      = 0xC3C;
_LEBDLY1bits  = 0xC3C;
 AUXCON1      = 0xC3E;
_AUXCON1      = 0xC3E;
_AUXCON1bits  = 0xC3E;
 PWMCON2      = 0xC40;
_PWMCON2      = 0xC40;
_PWMCON2bits  = 0xC40;
 IOCON2       = 0xC42;
_IOCON2       = 0xC42;
_IOCON2bits   = 0xC42;
 FCLCON2      = 0xC44;
_FCLCON2      = 0xC44;
_FCLCON2bits  = 0xC44;
 PDC2         = 0xC46;
_PDC2         = 0xC46;
 PHASE2       = 0xC48;
_PHASE2       = 0xC48;
 DTR2         = 0xC4A;
_DTR2         = 0xC4A;
 ALTDTR2      = 0xC4C;
_ALTDTR2      = 0xC4C;
 SDC2         = 0xC4E;
_SDC2         = 0xC4E;
 SPHASE2      = 0xC50;
_SPHASE2      = 0xC50;
 TRIG2        = 0xC52;
_TRIG2        = 0xC52;
_TRIG2bits    = 0xC52;
 TRGCON2      = 0xC54;
_TRGCON2      = 0xC54;
_TRGCON2bits  = 0xC54;
 STRIG2       = 0xC56;
_STRIG2       = 0xC56;
_STRIG2bits   = 0xC56;
 PWMCAP2      = 0xC58;
_PWMCAP2      = 0xC58;
_PWMCAP2bits  = 0xC58;
 LEBCON2      = 0xC5A;
_LEBCON2      = 0xC5A;
_LEBCON2bits  = 0xC5A;
 LEBDLY2      = 0xC5C;
_LEBDLY2      = 0xC5C;
_LEBDLY2bits  = 0xC5C;
 AUXCON2      = 0xC5E;
_AUXCON2      = 0xC5E;
_AUXCON2bits  = 0xC5E;
 PWMCON3      = 0xC60;
_PWMCON3      = 0xC60;
_PWMCON3bits  = 0xC60;
 IOCON3       = 0xC62;
_IOCON3       = 0xC62;
_IOCON3bits   = 0xC62;
 FCLCON3      = 0xC64;
_FCLCON3      = 0xC64;
_FCLCON3bits  = 0xC64;
 PDC3         = 0xC66;
_PDC3         = 0xC66;
 PHASE3       = 0xC68;
_PHASE3       = 0xC68;
 DTR3         = 0xC6A;
_DTR3         = 0xC6A;
 ALTDTR3      = 0xC6C;
_ALTDTR3      = 0xC6C;
 SDC3         = 0xC6E;
_SDC3         = 0xC6E;
 SPHASE3      = 0xC70;
_SPHASE3      = 0xC70;
 TRIG3        = 0xC72;
_TRIG3        = 0xC72;
_TRIG3bits    = 0xC72;
 TRGCON3      = 0xC74;
_TRGCON3      = 0xC74;
_TRGCON3bits  = 0xC74;
 STRIG3       = 0xC76;
_STRIG3       = 0xC76;
_STRIG3bits   = 0xC76;
 PWMCAP3      = 0xC78;
_PWMCAP3      = 0xC78;
_PWMCAP3bits  = 0xC78;
 LEBCON3      = 0xC7A;
_LEBCON3      = 0xC7A;
_LEBCON3bits  = 0xC7A;
 LEBDLY3      = 0xC7C;
_LEBDLY3      = 0xC7C;
_LEBDLY3bits  = 0xC7C;
 AUXCON3      = 0xC7E;
_AUXCON3      = 0xC7E;
_AUXCON3bits  = 0xC7E;
 PWMCON4      = 0xC80;
_PWMCON4      = 0xC80;
_PWMCON4bits  = 0xC80;
 IOCON4       = 0xC82;
_IOCON4       = 0xC82;
_IOCON4bits   = 0xC82;
 FCLCON4      = 0xC84;
_FCLCON4      = 0xC84;
_FCLCON4bits  = 0xC84;
 PDC4         = 0xC86;
_PDC4         = 0xC86;
 PHASE4       = 0xC88;
_PHASE4       = 0xC88;
 DTR4         = 0xC8A;
_DTR4         = 0xC8A;
 ALTDTR4      = 0xC8C;
_ALTDTR4      = 0xC8C;
 SDC4         = 0xC8E;
_SDC4         = 0xC8E;
 SPHASE4      = 0xC90;
_SPHASE4      = 0xC90;
 TRIG4        = 0xC92;
_TRIG4        = 0xC92;
_TRIG4bits    = 0xC92;
 TRGCON4      = 0xC94;
_TRGCON4      = 0xC94;
_TRGCON4bits  = 0xC94;
 STRIG4       = 0xC96;
_STRIG4       = 0xC96;
_STRIG4bits   = 0xC96;
 PWMCAP4      = 0xC98;
_PWMCAP4      = 0xC98;
_PWMCAP4bits  = 0xC98;
 LEBCON4      = 0xC9A;
_LEBCON4      = 0xC9A;
_LEBCON4bits  = 0xC9A;
 LEBDLY4      = 0xC9C;
_LEBDLY4      = 0xC9C;
_LEBDLY4bits  = 0xC9C;
 AUXCON4      = 0xC9E;
_AUXCON4      = 0xC9E;
_AUXCON4bits  = 0xC9E;
 PWMCON5      = 0xCA0;
_PWMCON5      = 0xCA0;
_PWMCON5bits  = 0xCA0;
 IOCON5       = 0xCA2;
_IOCON5       = 0xCA2;
_IOCON5bits   = 0xCA2;
 FCLCON5      = 0xCA4;
_FCLCON5      = 0xCA4;
_FCLCON5bits  = 0xCA4;
 PDC5         = 0xCA6;
_PDC5         = 0xCA6;
 PHASE5       = 0xCA8;
_PHASE5       = 0xCA8;
 DTR5         = 0xCAA;
_DTR5         = 0xCAA;
 ALTDTR5      = 0xCAC;
_ALTDTR5      = 0xCAC;
 SDC5         = 0xCAE;
_SDC5         = 0xCAE;
 SPHASE5      = 0xCB0;
_SPHASE5      = 0xCB0;
 TRIG5        = 0xCB2;
_TRIG5        = 0xCB2;
_TRIG5bits    = 0xCB2;
 TRGCON5      = 0xCB4;
_TRGCON5      = 0xCB4;
_TRGCON5bits  = 0xCB4;
 STRIG5       = 0xCB6;
_STRIG5       = 0xCB6;
_STRIG5bits   = 0xCB6;
 PWMCAP5      = 0xCB8;
_PWMCAP5      = 0xCB8;
_PWMCAP5bits  = 0xCB8;
 LEBCON5      = 0xCBA;
_LEBCON5      = 0xCBA;
_LEBCON5bits  = 0xCBA;
 LEBDLY5      = 0xCBC;
_LEBDLY5      = 0xCBC;
_LEBDLY5bits  = 0xCBC;
 AUXCON5      = 0xCBE;
_AUXCON5      = 0xCBE;
_AUXCON5bits  = 0xCBE;
 TRISA        = 0xE00;
_TRISA        = 0xE00;
_TRISAbits    = 0xE00;
 PORTA        = 0xE02;
_PORTA        = 0xE02;
_PORTAbits    = 0xE02;
 LATA         = 0xE04;
_LATA         = 0xE04;
_LATAbits     = 0xE04;
 ODCA         = 0xE06;
_ODCA         = 0xE06;
_ODCAbits     = 0xE06;
 CNENA        = 0xE08;
_CNENA        = 0xE08;
_CNENAbits    = 0xE08;
 CNPUA        = 0xE0A;
_CNPUA        = 0xE0A;
_CNPUAbits    = 0xE0A;
 CNPDA        = 0xE0C;
_CNPDA        = 0xE0C;
_CNPDAbits    = 0xE0C;
 ANSELA       = 0xE0E;
_ANSELA       = 0xE0E;
_ANSELAbits   = 0xE0E;
 TRISB        = 0xE10;
_TRISB        = 0xE10;
_TRISBbits    = 0xE10;
 PORTB        = 0xE12;
_PORTB        = 0xE12;
_PORTBbits    = 0xE12;
 LATB         = 0xE14;
_LATB         = 0xE14;
_LATBbits     = 0xE14;
 ODCB         = 0xE16;
_ODCB         = 0xE16;
_ODCBbits     = 0xE16;
 CNENB        = 0xE18;
_CNENB        = 0xE18;
_CNENBbits    = 0xE18;
 CNPUB        = 0xE1A;
_CNPUB        = 0xE1A;
_CNPUBbits    = 0xE1A;
 CNPDB        = 0xE1C;
_CNPDB        = 0xE1C;
_CNPDBbits    = 0xE1C;
 ANSELB       = 0xE1E;
_ANSELB       = 0xE1E;
_ANSELBbits   = 0xE1E;
 TRISC        = 0xE20;
_TRISC        = 0xE20;
_TRISCbits    = 0xE20;
 PORTC        = 0xE22;
_PORTC        = 0xE22;
_PORTCbits    = 0xE22;
 LATC         = 0xE24;
_LATC         = 0xE24;
_LATCbits     = 0xE24;
 ODCC         = 0xE26;
_ODCC         = 0xE26;
_ODCCbits     = 0xE26;
 CNENC        = 0xE28;
_CNENC        = 0xE28;
_CNENCbits    = 0xE28;
 CNPUC        = 0xE2A;
_CNPUC        = 0xE2A;
_CNPUCbits    = 0xE2A;
 CNPDC        = 0xE2C;
_CNPDC        = 0xE2C;
_CNPDCbits    = 0xE2C;
 ANSELC       = 0xE2E;
_ANSELC       = 0xE2E;
_ANSELCbits   = 0xE2E;
 ADCAL1       = 0xF40;
_ADCAL1       = 0xF40;
 ADCAL2       = 0xF42;
_ADCAL2       = 0xF42;
 ADCAL3       = 0xF44;
_ADCAL3       = 0xF44;
 ADCAL4       = 0xF46;
_ADCAL4       = 0xF46;
 ADCAL5       = 0xF48;
_ADCAL5       = 0xF48;
 ADCAL6       = 0xF4A;
_ADCAL6       = 0xF4A;
 ADCAL7       = 0xF4C;
_ADCAL7       = 0xF4C;
 ADCAL8       = 0xF4E;
_ADCAL8       = 0xF4E;
 ADCAL9       = 0xF50;
_ADCAL9       = 0xF50;
 ADCAL10      = 0xF52;
_ADCAL10      = 0xF52;
 _APPO        = 0xF8E;
__APPO        = 0xF8E;
 _APPIN       = 0xF90;
__APPIN       = 0xF90;
 APPS         = 0xF92;
_APPS         = 0xF92;
_APPSbits     = 0xF92;
 STROUTL      = 0xF94;
_STROUTL      = 0xF94;
 STROUTH      = 0xF96;
_STROUTH      = 0xF96;
 STROVCNT     = 0xF98;
_STROVCNT     = 0xF98;
 JDATAH       = 0xFF0;
_JDATAH       = 0xFF0;
 JDATAL       = 0xFF2;
_JDATAL       = 0xFF2;
/*
** ======= Base Addresses for Various Peripherals and ACC ======
*/

 ACCA         = 0x22;
_ACCA         = 0x22;
 ACCB         = 0x28;
_ACCB         = 0x28;
 IC1          = 0x144;
_IC1          = 0x144;
 IC2          = 0x14C;
_IC2          = 0x14C;
 IC3          = 0x154;
_IC3          = 0x154;
 IC4          = 0x15C;
_IC4          = 0x15C;
 OC1          = 0x904;
_OC1          = 0x904;
 OC2          = 0x90E;
_OC2          = 0x90E;
 OC3          = 0x918;
_OC3          = 0x918;
 OC4          = 0x922;
_OC4          = 0x922;
 SPI1         = 0x240;
_SPI1         = 0x240;
 SPI2         = 0x260;
_SPI2         = 0x260;
 UART1        = 0x220;
_UART1        = 0x220;
 UART2        = 0x230;
_UART2        = 0x230;
